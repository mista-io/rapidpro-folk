# Generated by Django 4.2.3 on 2023-12-05 16:13

from datetime import datetime, timedelta, timezone as tzone

from django.db import migrations
from django.db.models import Q
from django.utils import timezone


def fix_bad_last_seen_on(apps, schema_editor):  # pragma: no cover
    Contact = apps.get_model("contacts", "Contact")

    earliest_allowed = datetime(2010, 1, 1, 0, 0, 0, 0, tzinfo=tzone.utc)

    # find contacts with last_seen_on set to before this project existed or more than a day in the future
    contacts = Contact.objects.filter(
        Q(last_seen_on__lt=earliest_allowed) | Q(last_seen_on__gt=timezone.now() + timedelta(days=1))
    ).order_by("-last_seen_on")
    num_total = contacts.count()
    num_fixed, num_cleared = 0, 0

    for i, contact in enumerate(contacts):
        current = contact.last_seen_on

        # try re-parsing as timestamp in seconds
        try:
            corrected = datetime.fromtimestamp(datetime.timestamp(contact.last_seen_on) * 1000, tzone.utc)
        except ValueError:
            corrected = None

        if corrected and earliest_allowed < corrected < timezone.now():
            contact.last_seen_on = corrected
            contact.modified_on = timezone.now()
            contact.save(update_fields=("last_seen_on", "modified_on"))
            num_fixed += 1
            print(f" > contact {contact.uuid} {i+1}/{num_total}: {current.isoformat()} -> {corrected.isoformat()} ")
        else:
            last_msg = contact.msgs.filter(direction="I").order_by("created_on").last()
            corrected = last_msg.created_on if last_msg else None

            if corrected:
                contact.last_seen_on = corrected
                contact.modified_on = timezone.now()
                contact.save(update_fields=("last_seen_on", "modified_on"))
                num_fixed += 1
                print(
                    f" > contact {contact.uuid} {i+1}/{num_total}: {current.isoformat()} -> {corrected.isoformat()} (from message)"
                )
            else:
                contact.last_seen_on = None
                contact.modified_on = timezone.now()
                contact.save(update_fields=("last_seen_on", "modified_on"))
                num_cleared += 1
                print(f" > contact {contact.uuid} {i+1}/{num_total}: {current.isoformat()} -> NULL")

    if num_total:
        print(f"Fixed: {num_fixed} cleared: {num_cleared}")


def reverse(apps, schema_editor):  # pragma: no cover
    pass


def apply_manual():  # pragma: no cover
    from django.apps import apps

    fix_bad_last_seen_on(apps, None)


class Migration(migrations.Migration):
    dependencies = [("contacts", "0179_remove_contacturn_auth")]

    operations = [migrations.RunPython(fix_bad_last_seen_on, reverse)]
